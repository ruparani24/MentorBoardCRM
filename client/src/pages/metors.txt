// src/pages/Mentors.jsx
import React, { useEffect, useState } from "react";
import axios from "axios";

const API_BASE = "http://localhost:5000"; // ðŸ‘ˆ update this if backend runs on different port

const Mentors = () => {
  const [mentors, setMentors] = useState([]);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState("");

  // Add modal state
  const [showAdd, setShowAdd] = useState(false);
  const [saving, setSaving] = useState(false);
  const [form, setForm] = useState({
    fullName: "",
    email: "",
    expertise: "",
    availability: "Full Time",
    department: "",
    experience: "",
  });

  // Fetch mentors on mount
  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        const res = await axios.get(`${API_BASE}/api/mentors`);
        const list = Array.isArray(res.data)
          ? res.data
          : Array.isArray(res.data?.data)
          ? res.data.data
          : [];
        if (mounted) setMentors(list);
      } catch (e) {
        setErr("Failed to load mentors.");
        console.error(e);
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return () => {
      mounted = false;
    };
  }, []);

  const openAdd = () => {
    setForm({
      fullName: "",
      email: "",
      expertise: "",
      availability: "Full Time",
      department: "",
      experience: "",
    });
    setShowAdd(true);
  };

  const closeAdd = () => {
    if (!saving) setShowAdd(false);
  };

  const onChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };

  const saveMentor = async () => {
    if (!form.fullName.trim() || !form.email.trim()) {
      setErr("Full Name and Email are required.");
      return;
    }
    setSaving(true);
    setErr("");
    try {
      const payload = {
        name: form.fullName,
        email: form.email,
        expertise: form.expertise,
        availability: form.availability,
        department: form.department,
        experience: form.experience,
      };
      const res = await axios.post(`${API_BASE}/api/mentors`, payload);

      const createdRaw = res.data?.data ?? res.data ?? payload;
      const created =
        createdRaw && createdRaw.id
          ? createdRaw
          : { ...createdRaw, id: Date.now().toString() };

      setMentors((prev) => [...prev, created]);
      setShowAdd(false);
    } catch (e) {
      console.error(e);
      setErr("Failed to save mentor.");
    } finally {
      setSaving(false);
    }
  };

  return (
    <div>
      {/* Header with buttons */}
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-semibold">Mentors List</h1>
        <div className="space-x-2">
          <button
            className="px-3 py-1 bg-blue-500 text-white rounded"
            onClick={openAdd}
          >
            Add
          </button>
          <button className="px-3 py-1 bg-red-500 text-white rounded">
            Delete
          </button>
          <button className="px-3 py-1 bg-gray-500 text-white rounded">
            Sort
          </button>
          <button className="px-3 py-1 bg-gray-500 text-white rounded">
            Filter
          </button>
        </div>
      </div>

      {err && (
        <div className="mb-3 text-sm text-red-600 bg-red-50 border border-red-200 px-3 py-2 rounded">
          {err}
        </div>
      )}

      {/* Table */}
      <div className="overflow-x-auto border rounded">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-4 py-2">
                <input type="checkbox" />
              </th>
              <th className="px-4 py-2 text-left">Full Name</th>
              <th className="px-4 py-2 text-left">Email ID</th>
              <th className="px-4 py-2 text-left">Expertise</th>
              <th className="px-4 py-2 text-left">Availability</th>
              <th className="px-4 py-2 text-left">Department</th>
              <th className="px-4 py-2 text-left">Experience</th>
              <th className="px-4 py-2 text-left">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {loading ? (
              <tr>
                <td className="px-4 py-4 text-sm text-gray-500" colSpan={8}>
                  Loading...
                </td>
              </tr>
            ) : mentors.length === 0 ? (
              <tr>
                <td className="px-4 py-6 text-sm text-gray-500" colSpan={8}>
                  No mentors yet. Click <span className="font-medium">Add</span>{" "}
                  to create one.
                </td>
              </tr>
            ) : (
              mentors.map((m) => (
                <tr key={m.id || m.email}>
                  <td className="px-4 py-2">
                    <input type="checkbox" />
                  </td>
                  <td className="px-4 py-2">{m.name || m.fullName}</td>
                  <td className="px-4 py-2">{m.email}</td>
                  <td className="px-4 py-2">{m.expertise}</td>
                  <td className="px-4 py-2">{m.availability}</td>
                  <td className="px-4 py-2">{m.department}</td>
                  <td className="px-4 py-2">{m.experience}</td>
                  <td className="px-4 py-2">
                    <button className="text-blue-600 hover:underline text-sm">
                      Edit
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="flex justify-between items-center mt-4">
        <div>
          Rows per page:
          <select className="ml-2 border rounded px-2 py-1" defaultValue="10">
            <option>5</option>
            <option>10</option>
            <option>20</option>
          </select>
        </div>
        <div className="space-x-2">
          <button className="px-3 py-1 border rounded">{"<"}</button>
          <button className="px-3 py-1 border rounded">{">"}</button>
        </div>
      </div>

      {/* Add Mentor Modal */}
      {showAdd && (
        <div className="fixed inset-0 z-50 bg-black/40 flex items-center justify-center">
          <div className="bg-white w-full max-w-lg rounded-xl shadow-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold">Add New Mentor</h2>
              <button
                className="text-gray-500 hover:text-gray-700"
                onClick={closeAdd}
                disabled={saving}
                title="Close"
              >
                âœ•
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="text-sm text-gray-600">Full Name</label>
                <input
                  type="text"
                  name="fullName"
                  value={form.fullName}
                  onChange={onChange}
                  className="mt-1 w-full border rounded px-3 py-2"
                  placeholder="Jane Doe"
                />
              </div>
              <div>
                <label className="text-sm text-gray-600">Email ID</label>
                <input
                  type="email"
                  name="email"
                  value={form.email}
                  onChange={onChange}
                  className="mt-1 w-full border rounded px-3 py-2"
                  placeholder="jane@example.com"
                />
              </div>
              <div>
                <label className="text-sm text-gray-600">Expertise</label>
                <input
                  type="text"
                  name="expertise"
                  value={form.expertise}
                  onChange={onChange}
                  className="mt-1 w-full border rounded px-3 py-2"
                  placeholder="AI / Web / Cloud"
                />
              </div>
              <div>
                <label className="text-sm text-gray-600">Availability</label>
                <select
                  name="availability"
                  value={form.availability}
                  onChange={onChange}
                  className="mt-1 w-full border rounded px-3 py-2"
                >
                  <option>Full Time</option>
                  <option>Part Time</option>
                  <option>Ad-hoc</option>
                </select>
              </div>
              <div>
                <label className="text-sm text-gray-600">Department</label>
                <input
                  type="text"
                  name="department"
                  value={form.department}
                  onChange={onChange}
                  className="mt-1 w-full border rounded px-3 py-2"
                  placeholder="Computer Science"
                />
              </div>
              <div>
                <label className="text-sm text-gray-600">Experience</label>
                <input
                  type="text"
                  name="experience"
                  value={form.experience}
                  onChange={onChange}
                  className="mt-1 w-full border rounded px-3 py-2"
                  placeholder="5 yrs"
                />
              </div>
            </div>

            <div className="flex justify-end gap-2 mt-6">
              <button
                onClick={closeAdd}
                className="px-4 py-2 border rounded"
                disabled={saving}
              >
                Cancel
              </button>
              <button
                onClick={saveMentor}
                className="px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-60"
                disabled={saving}
              >
                {saving ? "Saving..." : "Save"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Mentors;
